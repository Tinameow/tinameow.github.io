<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>Experience as a Data Engineer</title>
    <link href="/2022/07/21/Experience-data_engineer/"/>
    <url>/2022/07/21/Experience-data_engineer/</url>
    
    <content type="html"><![CDATA[<h2 id="Work-Content"><a href="#Work-Content" class="headerlink" title="Work Content"></a>Work Content</h2><h3 id="Data-Warehouse-Modeling"><a href="#Data-Warehouse-Modeling" class="headerlink" title="Data Warehouse Modeling"></a>Data Warehouse Modeling</h3><p>“Data warehouse engineers are essentially managers providing support to the data warehouse. They troubleshoot current procedures, strive to improve data organization, fix performance issues, translate data analysis into good data design, and collaborate with other data workers.”</p><p>清理整合各种业务系统的数据，根据业务含义设计整合成新的表，以便于数据分析。我主要负责的是贷款交易相关的。</p><ul><li><p><strong>整合数据</strong>：Integrate data from different sources. Store SQL procedures to run automatically. 需要确认业务逻辑和考虑业务需求。主要是和产品以及贷款系统交易系统的同事对接，了解新业务的逻辑，了解系统更新所涉及的数据方面的更新情况，比如码值变更、关联关系变更等。<br>业务变更：需要跨部门和业务系统保持联系。仔细询问变更内容和评估对数仓的影响。如果有影响，需要判断数仓需要做什么变更或者数据分析需要更改什么口径（新业务场景）。</p></li><li><p><strong>保障数据一致性和准确性</strong>：在系统中可能有一些bug导致的数据，可以在数仓兜底修复数据。需要设计一些校验，基础的比如主键、码值的校验，针对交易场景还有一些金额的校验，比如放还款和净增的强校验，一些限制条件的弱校验，比如状态和金额不匹配之类的。只涉及单个ODS表的字段的校验其实应该往下放。</p><ol><li>设置校验</li><li>重刷数据、做好记录</li></ol></li><li><p><strong>保障数据产出</strong>：可能会因为资源问题，上游业务变更，代码bug，甚至框架bug之类的问题导致数据没能产出或延迟，都需要数开解决，通常是凌晨跑前一天的数据，所以问题一般也都需要凌晨及时告警和解决。我一般是凌晨三四点接到电话。刚开始频率比较高，感觉每周至少一次（正值刚接手+业务变更+资源问题）；近离职的几个月大概每月2~3次。真正需要处理的问题的频率可能是三分之一？</p><ol><li>资源问题：随着公司发展，数据量越来越多，或者某个业务场景下数据激增，之前配置的资源可能就跑不过了。可能可以通过预测数据量和资源使用率来动态调整配置资源？不过这样的话，还会涉及平台资源调度。</li><li>代码问题：贷款维护基本都是我自己开发+测试的。主要是代码要规范，流程要规范。</li><li>业务变更&#x2F;Bug：一些强校验会fail，需要及时定位处理。</li><li>平台&#x2F;框架bug：出现一次就尽量想办法修复或者避免，但比较难以避免。</li></ol></li><li><p><strong>提供咨询</strong>：作为连接系统业务和数据分析的桥梁，数仓负责人经常需要解答一些问题，比如某个场景下最合适的表和字段，不同表之间的差异，某些表的使用方法，甚至一些sql的优化等。为了减少做应答机器人的次数，</p><ol><li>在数据地图上备注：查找点进某张表后，可以看到这张表的备注和一些字段的备注。（只适用于对数仓熟悉、知道使用哪张表、并且问题只涉及这张表和字段的情况）</li><li>组织培训：编写PPT，定了会议时间并录制了，之后分享了相关资料和录像。（效果取决于课件准备的质量，主要适用于讲解数仓的基础知识和架构。）</li><li>编写在线文档：补充1和2，在文档里添加基础知识的资料和链接，加上涉及多个表的差异比较，以及其他一些涉及多张表或者口径变更之类的问题。</li></ol></li></ul><h3 id="Data-Warehouse-Governance"><a href="#Data-Warehouse-Governance" class="headerlink" title="Data Warehouse Governance"></a>Data Warehouse Governance</h3><p>类似于重构吧。因为数仓在建立后，随着数仓的发展，总会有一些更好的方案。在初期也可能在开发效率和规范中偏向效率，而有一些不太规范的情况。在基本稳定之后，更规范可能效率更高，可用性更好，所以治理是必要的。</p><ol><li>设计一系列资产质量的指标，用以评估现有资产的质量和量化治理的效果。</li><li>根据定义的指标，梳理现存的需要改进的明细。</li><li>分配任务然后治理。</li></ol><p class="note note-secondary">指标基本是参考别的公司的方案。主要问题是改起来很麻烦，大部分需要改的表都有很多下游了，牵扯比较广。然后因为改完不会有特别明显的提升，还可能出现问题。然后还有一些是数仓设计上的问题，就是虽然有“理论上”的数仓，但实际操作总有些实际的问题而难以达到。比如之前的一些表的分层可能就有问题，如果要改下游依赖也都要改。比如从dws汇总的dws，这种dws是不是也应该区分。</p><h3 id="Skills"><a href="#Skills" class="headerlink" title="Skills"></a>Skills</h3><ul><li><p>Domain Knowledge &gt;&#x3D; Communication Skills &gt; Techniqal Skills</p></li><li><p>Domain Knowledge</p></li><li><p>Communication Skills</p></li><li><p>Techniqal Skills</p><ul><li>Mainly code with SQL</li><li>Use java, python, excel sometimes</li><li>Data Warehouse Design Principals </li><li>ETL</li><li>Hadoop, Hive, Spark</li></ul></li></ul><h2 id="工作体验"><a href="#工作体验" class="headerlink" title="工作体验"></a>工作体验</h2><p>了解到了工作是是怎么</p><p>总体来说，我觉得今年比去年更“好”了。信息同步机制更完善了，OA中加上了cc数仓的流程，并且贷款同事会主动告诉我更新内容并询问影响了。校验也加了不少，借据层和客户层的平衡校验以及。夜间巡检频率也降低了。对于数据的使用者来说，文档和注释也更多了，应该更好上手了。</p><p>刚开始不熟悉各种表和工作流程比较痛苦，取数感觉天天迷失在数据的海洋里，遇到一些问题也不太清楚怎么处理。熟悉之后取数很顺手，就算有问题的也大概知道怎么解决，感觉工作反而变得更简单了。同时感觉工作的自由度还是挺高的，发现的问题都可以尝试解决，同事都也都很乐于助人（感恩</p><p>刚做起来就放弃也挺遗憾的，我觉得还有很多内容没有尝试过，并且对工作的感觉比起去年更好了，工作好像也越来越有趣了。可能是太慢热了吧，今年年初的时候还觉得没啥意思。或许之后可以多问问别人觉得工作有意思的点！</p><h3 id="快乐"><a href="#快乐" class="headerlink" title="快乐"></a>快乐</h3><ul><li>开发设计也比较有趣而且不难也不算复杂，sql简单产出快，即时反馈很爽。</li><li>回答别人的问题，讲解怎么使用建立的模型感觉非常快乐。感觉工作的成果能帮到大家。</li><li>面向公司内部，压力比较小；同时几乎全公司都会查询使用贷款的数据，visibility比较高。</li><li>定位数据问题会有解密的快乐。</li></ul><h3 id="一般"><a href="#一般" class="headerlink" title="一般"></a>一般</h3><ul><li>感觉主要还是了解业务逻辑和业务诉求，不然会很迷茫。上手有些困难，不了解的东西有些多，有些“知道但不理解”的感觉。</li><li>每个改动都需要非常仔细地评估，事后再改动通常会比较困难&#x2F;麻烦。</li><li>咨询有时会打断思路，花费的时间有时比较多；有些数据问题查起来麻烦。</li></ul><h3 id="讨厌"><a href="#讨厌" class="headerlink" title="讨厌"></a>讨厌</h3><ul><li>半夜运维：看起来没有办法完全避免，并且近几个月感觉是团队里被告警次数较少的了。<ul><li>不过巡检机制可以优化，至少因为上游延迟而延迟应该是可以解决的</li><li>但是真的要处理的这些问题可能是表负责人才能快且好的解决的？rotation可能也不太靠谱（针对目前的情况）</li></ul></li><li>历史存在的数据问题颇多，也时常有几条数据有问题。感觉疲于刷数。</li><li>治理牵扯多，改起来麻烦，然后因为优先级低，不好推动，并且进展缓慢。</li><li>运行很慢：<ul><li>一是数据平台跑数真的卡，1s跑完1s获取结果1s展示…不过被允许使用command line之后快乐多了。</li><li>二是资源不足，太多人用没有扩容，经常出现资源爆满跑不了数的情况。</li><li>三是数据量大跑的就是慢，基本都分几段写了…</li></ul></li></ul><blockquote><p>Well, I heard a lot of software engineer positions require on call… </p></blockquote><h2 id="经验总结"><a href="#经验总结" class="headerlink" title="经验总结"></a>经验总结</h2><h3 id="通用经验"><a href="#通用经验" class="headerlink" title="通用经验"></a>通用经验</h3><ul><li><p>Think one step more确认最终问题 尽量避免xy问题 要做什么？为什么？怎么做？做完之后呢？避免重复的问题</p></li><li><p>产出成果 记录&amp;表述</p></li></ul><p>人很容易失忆，自己都不记得之前做了什么，更别说让别人记得了！如果有必要的话需要主动提起！需要记录一下，事情+作用&#x2F;impact</p><ul><li><p>问题：</p><ul><li>是不是问题？需不需要解决？紧急吗？</li><li>能不能改变？怎么改？谁来改？</li></ul></li><li><p>推进：推动别人前要先自己搞明白流程</p></li><li><p>会议：做好准备，明确目的，尽量快得发现疑惑的点并确定，如果能先找出问题会议上再讨论提出的解决方案就更好了。可能需要事先构想解决方案，大的方案好想，可能需要更关注字段含义等细节。（不过很细的问题也可以之后再问啦。那么还有就是摸清每个人都是什么作用，诉求都是什么。记录一下结论！</p></li><li><p>比起简洁 尽量努力把话讲清楚 </p></li><li><p>排序 工作优先级</p></li></ul><h3 id="SQL经验"><a href="#SQL经验" class="headerlink" title="SQL经验"></a>SQL经验</h3><h4 id="数据检查"><a href="#数据检查" class="headerlink" title="数据检查"></a>数据检查</h4><ul><li>主键唯一    ：“主键”是唯一的吗？如果根据“主键”汇总，其他非聚合项的取值是最大最小？求和？</li><li>分布    ：空值占比？各个码值占比？数据倾斜？</li><li>关联关系：一对一？一对多？多对多？如果不是一对一，是选择膨胀还是通过什么条件筛选整合呢？</li><li>默认值    ：空值怎么处理？默认值是什么？</li><li>每个字段的含义和逻辑: 是否有必要囊括？</li></ul><p>针对优化&#x2F;刷数：</p><ul><li>影响？</li></ul><h4 id="优化思路"><a href="#优化思路" class="headerlink" title="优化思路"></a>优化思路</h4><p>优化业务逻辑&gt;优化代码&gt;&#x3D;优化资源配置</p><h5 id="优化业务逻辑"><a href="#优化业务逻辑" class="headerlink" title="优化业务逻辑"></a>优化业务逻辑</h5><ul><li>筛选数据，减少不必要的数据和不必要的关联</li><li>根据新的业务逻辑更新代码，比如不再依赖停止更新了的表</li></ul><h5 id="优化代码"><a href="#优化代码" class="headerlink" title="优化代码"></a>优化代码</h5><ul><li>减少读表<ul><li>限制分区</li><li>减少读取大表的次数</li><li>先过滤后关联</li><li>分开处理 取默认值的数据 和 需要加工的数据</li></ul></li><li>减少写表<ul><li>临时表 vs 子查询</li></ul></li><li>避免数据倾斜<ul><li>避免使用distinct，distinct只有一个reducer</li><li>避免关联字段倾斜，比如空值，可以用rand()处理</li><li>distributed by rand()</li><li>窗口函数排序</li></ul></li><li>取第一行可用取最大值&#x2F;最小值代替</li></ul><h5 id="优化资源配置"><a href="#优化资源配置" class="headerlink" title="优化资源配置"></a>优化资源配置</h5><ul><li><p>调整spark的各种配置：门道挺多，虽然我看了一些教程，但因为我一般按默认配置来也还行，就没有什么特别的实践经验。</p></li><li><p>改用impala运行： 因为凌晨公司impala的资源闲置，并且运算少的时候impala会快不少。不过我对impala的原理了解不是很多。</p></li></ul><h3 id="搬砖小技巧"><a href="#搬砖小技巧" class="headerlink" title="搬砖小技巧"></a>搬砖小技巧</h3><ul><li>Excel 好用！</li><li>记录常用的queries，然后快乐copy&#x2F;paste~</li><li>重复的工作想办法自动化；如果不能避免，偶尔拧拧螺丝摸摸鱼也挺快乐</li></ul><h2 id="讨论"><a href="#讨论" class="headerlink" title="讨论"></a>讨论</h2><p>一个矛盾的地方：我想象中的规范的流程，必然会使效率降低，也必然会让每个人更拧螺丝以及更可替换？会因为流程更复杂而使改变变得更艰难，自由度也可能下降？</p><p>如果要做得更好需要更多得发掘业务的需求以及了解业务流程，应该怎么做呢？<br>    - 发掘数分的需求：<br>        * 直接询问收集意见？但没有具体的目的，很难问？<br>        * 查看现有的报表关注的指标<br>        * 一些common senses？自己想想？<br>    - 了解业务流程：<br>        * 直接问个大概（我觉得还是有个文档会比口口相传好，没有的情况就自己整理一个吧）<br>        * 通过看现有的数据了解<br>        * 在做各个需求的时候</p><p>凌晨巡检是很难受，也算是离职的原因之一，但也并不是因为我是女生，希望不要因此在工作中边缘化女性。不过话说回来，如何降低频率呢？公司应该设立什么样的制度呢？跨部门间的协作应该怎么促进呢？</p><p>最让我觉得有趣的总是发现问题，思考解决方案，并最终解决问题的过程。我为我能解决一些有“意义”的问题而感到快乐。这份工作或许不是快乐的根源而是媒介。我觉得我也可以再试试看别的方向？看看是开发更有趣还是Data更有趣。</p><p>如果要自动化的话，有可能自适应业务数据库的改动吗？或者说怎么更好得设计数据处理的pipeline呢？又要怎么聚合指标呢？哪些指标是通用的，数据又有哪些用呢？</p>]]></content>
    
    
    <categories>
      
      <category>Experience</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Big Data</tag>
      
      <tag>Work</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>数据开发-工作体验</title>
    <link href="/2022/07/21/%E5%B7%A5%E4%BD%9C%E4%BD%93%E9%AA%8C-%E6%95%B0%E6%8D%AE%E5%BC%80%E5%8F%91%E5%B7%A5%E7%A8%8B%E5%B8%88/"/>
    <url>/2022/07/21/%E5%B7%A5%E4%BD%9C%E4%BD%93%E9%AA%8C-%E6%95%B0%E6%8D%AE%E5%BC%80%E5%8F%91%E5%B7%A5%E7%A8%8B%E5%B8%88/</url>
    
    <content type="html"><![CDATA[<h2 id="工作内容"><a href="#工作内容" class="headerlink" title="工作内容"></a>工作内容</h2><h3 id="数仓模型"><a href="#数仓模型" class="headerlink" title="数仓模型"></a>数仓模型</h3><p>清理整合各种业务系统的数据，根据业务含义设计整合成新的表，以便于数据分析。我主要负责的是贷款交易相关的。</p><ul><li><p><strong>整合数据</strong>：Integrate data from different sources. Store SQL procedures to run automatically. 需要确认业务逻辑和考虑业务需求。主要是和产品以及贷款系统交易系统的同事对接，了解新业务的逻辑，了解系统更新所涉及的数据方面的更新情况，比如码值变更、关联关系变更等。<br>业务变更：需要跨部门和业务系统保持联系。仔细询问变更内容和评估对数仓的影响。如果有影响，需要判断数仓需要做什么变更或者数据分析需要更改什么口径（新业务场景）。</p></li><li><p><strong>保障数据一致性和准确性</strong>：在系统中可能有一些bug导致的数据，可以在数仓兜底修复数据。需要设计一些校验，基础的比如主键、码值的校验，针对交易场景还有一些金额的校验，比如放还款和净增的强校验，一些限制条件的弱校验，比如状态和金额不匹配之类的。只涉及单个ODS表的字段的校验其实应该往下放。</p><ol><li>设置校验</li><li>重刷数据、做好记录</li></ol></li><li><p><strong>保障数据产出</strong>：可能会因为资源问题，上游业务变更，代码bug，甚至框架bug之类的问题导致数据没能产出或延迟，都需要数开解决，通常是凌晨跑前一天的数据，所以问题一般也都需要凌晨及时告警和解决。我一般是凌晨三四点接到电话。刚开始频率比较高，感觉每周至少一次（正值刚接手+业务变更+资源问题）；近离职的几个月大概每月2~3次。真正需要处理的问题的频率可能是三分之一？</p><ol><li>资源问题：随着公司发展，数据量越来越多，或者某个业务场景下数据激增，之前配置的资源可能就跑不过了。可能可以通过预测数据量和资源使用率来动态调整配置资源？不过这样的话，还会涉及平台资源调度。</li><li>代码问题：贷款维护基本都是我自己开发+测试的。主要是代码要规范，流程要规范。</li><li>业务变更&#x2F;Bug：一些强校验会fail，需要及时定位处理。</li><li>平台&#x2F;框架bug：出现一次就尽量想办法修复或者避免，但比较难以避免。</li></ol></li><li><p><strong>提供咨询</strong>：作为连接系统业务和数据分析的桥梁，数仓负责人经常需要解答一些问题，比如某个场景下最合适的表和字段，不同表之间的差异，某些表的使用方法，甚至一些sql的优化等。为了减少做应答机器人的次数，</p><ol><li>在数据地图上备注：查找点进某张表后，可以看到这张表的备注和一些字段的备注。（只适用于对数仓熟悉、知道使用哪张表、并且问题只涉及这张表和字段的情况）</li><li>组织培训：编写PPT，定了会议时间并录制了，之后分享了相关资料和录像。（效果取决于课件准备的质量，主要适用于讲解数仓的基础知识和架构。）</li><li>编写在线文档：补充1和2，在文档里添加基础知识的资料和链接，加上涉及多个表的差异比较，以及其他一些涉及多张表或者口径变更之类的问题。</li></ol></li></ul><h3 id="数仓资产治理"><a href="#数仓资产治理" class="headerlink" title="数仓资产治理"></a>数仓资产治理</h3><p>类似于重构吧。因为数仓在建立后，随着数仓的发展，总会有一些更好的方案。在初期也可能在开发效率和规范中偏向效率，而有一些不太规范的情况。在基本稳定之后，更规范可能效率更高，可用性更好，所以治理是必要的。</p><ol><li>设计一系列资产质量的指标，用以评估现有资产的质量和量化治理的效果。</li><li>根据定义的指标，梳理现存的需要改进的明细。</li><li>分配任务然后治理。</li></ol><p>指标基本是参考别的公司的方案。主要问题是改起来很麻烦，大部分需要改的表都有很多下游了，牵扯比较广。然后因为改完不会有特别明显的提升，还可能出现问题。然后还有一些是数仓设计上的问题，就是虽然有“理论上”的数仓，但实际操作总有些实际的问题而难以达到。比如之前的一些表的分层可能就有问题，如果要改下游依赖也都要改。比如从dws汇总的dws，这种dws是不是也应该区分？</p><h3 id="技能"><a href="#技能" class="headerlink" title="技能"></a>技能</h3><ul><li><p>Domain Knowledge &gt;&#x3D; Communication Skills &gt; Techniqal Skills</p></li><li><p>Domain Knowledge</p></li><li><p>Communication Skills</p></li><li><p>Techniqal Skills</p><ul><li>Mainly code with SQL</li><li>Use java, python, excel sometimes</li><li>Data Warehouse Design Principals </li><li>ETL</li><li>Hadoop, Hive, Spark</li></ul></li></ul><h2 id="工作体验"><a href="#工作体验" class="headerlink" title="工作体验"></a>工作体验</h2><p>了解到了工作是怎么一回事。公司给钱</p><p>总体来说，我觉得今年比去年更“好”了。信息同步机制更完善了，OA中加上了cc数仓的流程，并且贷款同事会主动告诉我更新内容并询问影响了。校验也加了不少，借据层和客户层的平衡校验以及。夜间巡检频率也降低了。对于数据的使用者来说，文档和注释也更多了，应该更好上手了。</p><p>刚开始不熟悉各种表和工作流程比较痛苦，取数感觉天天迷失在数据的海洋里，遇到一些问题也不太清楚怎么处理。熟悉之后取数很顺手，就算有问题的也大概知道怎么解决，感觉工作反而变得更简单了。同时感觉工作的自由度还是挺高的，发现的问题都可以尝试解决，同事都也都很优秀且乐于助人（感恩</p><p>刚做起来就放弃也挺遗憾的，我觉得还有很多内容没有尝试过，并且对工作的感觉比起去年更好了，工作好像也越来越有趣了。可能是太慢热了吧，今年年初的时候还觉得没啥意思。或许之后可以多问问别人觉得工作有意思的点！</p><h3 id="快乐"><a href="#快乐" class="headerlink" title="快乐"></a>快乐</h3><ul><li>开发设计也比较有趣而且不难也不算复杂，sql简单产出方便，即时反馈很爽。</li><li>回答别人的问题，讲解怎么使用建立的模型感觉非常快乐。感觉工作的成果能帮到大家。</li><li>面向公司内部，压力比较小；同时几乎全公司都会查询使用贷款的数据，visibility比较高。</li><li>定位数据问题会有解密的快乐，而且绝大多数情况追踪数据总能找到问题所在。</li></ul><h3 id="一般"><a href="#一般" class="headerlink" title="一般"></a>一般</h3><ul><li>感觉主要还是了解业务逻辑和业务诉求，不然会很迷茫。上手有些困难，不了解的东西有些多，有些“知道但不理解”的感觉。</li><li>每个改动都需要非常仔细地评估，事后再改动通常会比较困难&#x2F;麻烦。</li><li>咨询有时会打断思路，同时咨询比较多，花费的时间也会比较多，并且不算在工作量里。</li></ul><h3 id="讨厌"><a href="#讨厌" class="headerlink" title="讨厌"></a>讨厌</h3><ul><li>半夜运维：看起来没有办法完全避免，并且近几个月感觉是团队里被告警次数较少的了。（晚上加班和凌晨加班我可以都不选吗？<ul><li>不过巡检机制可以优化，至少因为上游延迟而延迟应该是可以解决的</li><li>但是真的要处理的这些问题可能是表负责人才能快且好的解决的？</li></ul></li><li>历史存在的数据问题颇多，也时常有几条数据有问题。感觉疲于刷数。</li><li>治理牵扯多，改起来麻烦，然后因为优先级低，不好推动，并且进展缓慢。</li><li>运行很慢，会有些焦躁：<ul><li>一是数据平台跑数真的卡，1s跑完1s获取结果1s展示…不过被允许使用command line之后快乐多了。</li><li>二是资源不足，太多人用没有扩容，经常出现资源爆满跑不了数的情况。</li><li>三是数据量大跑的就是慢，基本都分几段写了，所以说还是要搭建并推广汇总表。</li></ul></li></ul><h2 id="经验总结"><a href="#经验总结" class="headerlink" title="经验总结"></a>经验总结</h2><h3 id="通用经验"><a href="#通用经验" class="headerlink" title="通用经验"></a>通用经验</h3><ul><li><p>Think one step more确认最终问题 尽量避免xy问题 要做什么？为什么？怎么做？做完之后呢？避免重复的问题</p></li><li><p>产出成果 记录&amp;表述</p></li></ul><p>人很容易失忆，自己都不记得之前做了什么，更别说让别人记得了！如果有必要的话需要主动提起！需要记录一下，事情+作用&#x2F;impact</p><ul><li><p>问题：</p><ul><li>是不是问题？需不需要解决？紧急吗？</li><li>能不能改变？怎么改？谁来改？</li></ul></li><li><p>推进：推动别人前要先自己搞明白流程</p></li><li><p>会议：做好准备，明确目的，尽量快得发现疑惑的点并确定，如果能先找出问题会议上再讨论提出的解决方案就更好了。可能需要事先构想解决方案，大的方案好想，可能需要更关注字段含义等细节。（不过很细的问题也可以之后再问啦。那么还有就是摸清每个人都是什么作用，诉求都是什么。记录一下结论！</p></li><li><p>比起简洁 尽量努力把话讲清楚 </p></li><li><p>排序 工作优先级</p></li></ul><h3 id="SQL经验"><a href="#SQL经验" class="headerlink" title="SQL经验"></a>SQL经验</h3><h4 id="数据检查"><a href="#数据检查" class="headerlink" title="数据检查"></a>数据检查</h4><ul><li>主键唯一    ：“主键”是唯一的吗？如果根据“主键”汇总，其他非聚合项的取值是最大最小？求和？</li><li>分布    ：空值占比？各个码值占比？数据倾斜？</li><li>关联关系：一对一？一对多？多对多？如果不是一对一，是选择膨胀还是通过什么条件筛选整合呢？</li><li>默认值    ：空值怎么处理？默认值是什么？</li><li>每个字段的含义和逻辑: 是否有必要囊括？</li></ul><p>针对优化&#x2F;刷数：</p><ul><li>影响？</li></ul><h4 id="优化思路"><a href="#优化思路" class="headerlink" title="优化思路"></a>优化思路</h4><p>优化业务逻辑&gt;优化代码&gt;&#x3D;优化资源配置</p><h5 id="优化业务逻辑"><a href="#优化业务逻辑" class="headerlink" title="优化业务逻辑"></a>优化业务逻辑</h5><ul><li>筛选数据，减少不必要的数据和不必要的关联</li><li>根据新的业务逻辑更新代码，比如不再依赖停止更新了的表</li></ul><h5 id="优化代码"><a href="#优化代码" class="headerlink" title="优化代码"></a>优化代码</h5><ul><li>减少读表<ul><li>限制分区</li><li>减少读取大表的次数</li><li>先过滤后关联</li><li>分开处理 取默认值的数据 和 需要加工的数据</li></ul></li><li>减少写表<ul><li>临时表 vs 子查询</li></ul></li><li>避免数据倾斜<ul><li>避免使用distinct，distinct只有一个reducer</li><li>避免关联字段倾斜，比如空值，可以用rand()处理</li><li>distributed by rand()</li><li>窗口函数排序</li></ul></li><li>取第一行可用取最大值&#x2F;最小值代替</li></ul><h5 id="优化资源配置"><a href="#优化资源配置" class="headerlink" title="优化资源配置"></a>优化资源配置</h5><ul><li><p>调整spark的各种配置：门道挺多，虽然我看了一些教程，但因为我一般按默认配置来也还行，就没有什么特别的实践经验。</p></li><li><p>改用impala运行： 因为凌晨公司impala的资源闲置，并且运算少的时候impala会快不少。不过我对impala的原理了解不是很多。</p></li></ul><h3 id="搬砖小技巧"><a href="#搬砖小技巧" class="headerlink" title="搬砖小技巧"></a>搬砖小技巧</h3><ul><li>Excel 好用！</li><li>记录常用的queries，然后快乐copy&#x2F;paste~</li><li>重复的工作想办法自动化；如果不能避免，偶尔拧拧螺丝摸摸鱼也挺快乐</li></ul><h2 id="讨论"><a href="#讨论" class="headerlink" title="讨论"></a>讨论</h2><p>一个矛盾的地方：我想象中的规范的流程，必然会使效率降低，也必然会让每个人更拧螺丝以及更可替换？会因为流程更复杂而使改变变得更艰难，自由度也可能下降？</p><p>如果要做得更好需要更多得发掘业务的需求以及了解业务流程，应该怎么做呢？<br>    - 发掘数分的需求：<br>        * 直接询问收集意见？但没有具体的目的，很难问？<br>        * 查看现有的报表关注的指标<br>        * 一些common senses？自己想想？<br>    - 了解业务流程：<br>        * 直接问个大概（我觉得还是有个文档会比口口相传好，没有的情况就自己整理一个吧）<br>        * 通过看现有的数据了解<br>        * 在做各个需求的时候</p><p>如果数开要自动化的话，有可能自适应业务数据库的改动吗？或者说怎么更好得设计数据处理的pipeline呢？又要怎么聚合指标呢？哪些指标是通用的，数据又有哪些用呢？</p><p>最让我觉得有趣的总是发现问题，思考解决方案，并最终解决问题的过程。我为我能解决问题而感到快乐，也为能帮助到别人而快乐。这份工作或许不是快乐的根源而是媒介。我又真的需要从工作中寻找意义吗？我觉得我也可以再试试看别的工作？看看是开发更有趣还是Data更有趣？或许可以蹭蹭BA的课？</p>]]></content>
    
    
    <categories>
      
      <category>Experience</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Big Data</tag>
      
      <tag>Work</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>深港澳金融科技师一级-考证</title>
    <link href="/2022/07/01/%E8%80%83%E8%AF%81-%E6%B7%B1%E6%B8%AF%E6%BE%B3%E9%87%91%E8%9E%8D%E7%A7%91%E6%8A%80%E5%B8%88/"/>
    <url>/2022/07/01/%E8%80%83%E8%AF%81-%E6%B7%B1%E6%B8%AF%E6%BE%B3%E9%87%91%E8%9E%8D%E7%A7%91%E6%8A%80%E5%B8%88/</url>
    
    <content type="html"><![CDATA[<h2 id="http-shmftpp-com"><a href="#http-shmftpp-com" class="headerlink" title="http://shmftpp.com/"></a><a href="%E4%BB%8B%E7%BB%8D">http://shmftpp.com/</a></h2><h2 id="准备"><a href="#准备" class="headerlink" title="准备"></a>准备</h2><ul><li>2022-01-29~2022-03-26 主要是周末，下班回家最多看一小时（在准备过程中发现塞尔达真有意思XD</li><li>把书大概翻了一边，有些没啥意思的内容没时间看就跳过了（标准化那本书基本没看），除了经济金融财会，基本是一天翻一本。</li></ul><h2 id="内容"><a href="#内容" class="headerlink" title="内容"></a>内容</h2><ul><li>科技方面的书感觉都很intro，感觉和文科一样，不过也对之前不知道的内容有了大概的了解。</li><li>金融对我来说比较难懂，特别是财会的概念和公式好多，不过还是对金融财会有了些了解。</li><li>有一本产品一本创业，还挺有趣的。</li><li>每本书必讲深港澳的战略布局，也因此非常无聊。</li><li>我不理解，为什么课后习题不给答案？</li><li>感觉教材编的很一般，很多东西都没写明白，有点东拼西凑的感觉。</li></ul><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>总的来说，通过考试push自己看了看书多了解了一些基础知识，我最开始报考的初衷还是达成了的。但是教材质量一般，也有很多“没用”的政策内容，或许不如自己找找金融入门视频入门书籍看有意思，只能说是走马观花了。</p>]]></content>
    
    
    <categories>
      
      <category>Certificates</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Big Data</tag>
      
      <tag>Fintech</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
